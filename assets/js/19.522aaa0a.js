(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{64:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"regexp对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp对象")]),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),a("p",[t._v("正则表达式是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。")]),a("p",[t._v("新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("另一种是使用"),a("code",[t._v("RegExp")]),t._v("构造函数。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("h2",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例属性")]),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 修饰符")]),a("ul",[a("li",[a("code",[t._v("i")]),t._v(" (ignoreCase) 不区分大小写")]),a("li",[a("code",[t._v("g")]),t._v(" (global) 全局匹配")]),a("li",[a("code",[t._v("m")]),t._v(" (multiline) 多行匹配（和"),a("code",[t._v("\\n")]),t._v("换行符有关）")])]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/abc/igm")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("//返回真，说明应用了对应的修饰符")]),t._v("\n\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignoreCase "),a("span",{attrs:{class:"token comment"}},[t._v("// true  ")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("multiline "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("h2",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例方法")]),a("h3",{attrs:{id:"regexp-prototype-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),a("p",[t._v("正则实例对象的"),a("code",[t._v("test")]),t._v("方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/cat/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'cats and dogs'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("h2",{attrs:{id:"字符串的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实例方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串的实例方法")]),a("p",[t._v("字符串的实例方法之中，有4种与正则表达式有关。")]),a("ul",[a("li",[a("code",[t._v("String.prototype.match()")]),t._v("：返回一个数组，成员是所有匹配的子字符串。")]),a("li",[a("code",[t._v("String.prototype.search()")]),t._v("：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。")]),a("li",[a("code",[t._v("String.prototype.replace()")]),t._v("：按照给定的正则表达式进行替换，返回替换后的字符串。")]),a("li",[a("code",[t._v("String.prototype.split()")]),t._v("：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。")])]),a("h3",{attrs:{id:"string-prototype-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match","aria-hidden":"true"}},[t._v("#")]),t._v(" String.prototype.match()")]),a("p",[t._v("字符串实例对象的"),a("code",[t._v("match")]),t._v("方法对字符串进行正则匹配，返回匹配结果。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/x/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["x"]')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/y/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])]),a("p",[t._v("字符串的"),a("code",[t._v("match")]),t._v("方法匹配成功返回一个数组，匹配失败返回"),a("code",[t._v("null")]),t._v("。")]),a("p",[t._v("如果正则表达式带有"),a("code",[t._v("g")]),t._v("修饰符，会一次性返回所有匹配成功的结果。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", "a"]')]),t._v("\n")])]),a("h3",{attrs:{id:"string-prototype-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search","aria-hidden":"true"}},[t._v("#")]),t._v(" String.prototype.search()")]),a("p",[t._v("字符串对象的"),a("code",[t._v("search")]),t._v("方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回"),a("code",[t._v("-1")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("search")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/x/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),a("p",[t._v("上面代码中，第一个匹配结果出现在字符串的"),a("code",[t._v("1")]),t._v("号位置。")]),a("h3",{attrs:{id:"string-prototype-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace","aria-hidden":"true"}},[t._v("#")]),t._v(" String.prototype.replace()")]),a("p",[t._v("字符串对象的"),a("code",[t._v("replace")]),t._v("方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("search"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replacement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("正则表达式如果不加"),a("code",[t._v("g")]),t._v("修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "baa"')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "baa"')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "bbb"')]),t._v("\n")])]),a("p",[t._v("上面代码中，最后一个正则表达式使用了"),a("code",[t._v("g")]),t._v("修饰符，导致所有的"),a("code",[t._v("b")]),t._v("都被替换掉了。")]),a("p",[a("code",[t._v("replace")]),t._v("方法的一个应用，就是消除字符串首尾两端的空格。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'  #id div.class  '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/^\\s+|\\s+$/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "#id div.class"')]),t._v("\n")])]),a("h3",{attrs:{id:"replace-替换变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace-替换变量","aria-hidden":"true"}},[t._v("#")]),t._v(" replace 替换变量")]),a("p",[t._v("语法")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token string"}},[t._v('"b"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("用*替换变量change")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" change"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"1"')]),t._v("\ndata "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"111"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("change"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token string"}},[t._v('"*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("h2",{attrs:{id:"匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 匹配规则")]),a("p",[t._v("正则表达式的规则很复杂，下面一一介绍这些规则。")]),a("h3",{attrs:{id:"字面量字符和元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符和元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 字面量字符和元字符")]),a("h4",{attrs:{id:"字面量字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 字面量字符")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/dog/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'old dog'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n")])]),a("p",[t._v("上面代码中正则表达式的"),a("code",[t._v("dog")]),t._v("，就是字面量字符，所以"),a("code",[t._v("/dog/")]),t._v("匹配"),a("code",[t._v("old dog")]),t._v("，因为它就表示"),a("code",[t._v("d")]),t._v("、"),a("code",[t._v("o")]),t._v("、"),a("code",[t._v("g")]),t._v("三个字母连在一起。")]),a("h4",{attrs:{id:"元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 元字符")]),a("p",[a("strong",[t._v("（1）点字符（.)")])]),a("p",[t._v("通常来说（.) 匹配任意字符")]),a("p",[t._v("点字符（"),a("code",[t._v(".")]),t._v("）匹配除回车（"),a("code",[t._v("\\r")]),t._v("）、换行("),a("code",[t._v("\\n")]),t._v(") 、行分隔符（"),a("code",[t._v("\\u2028")]),t._v("）和段分隔符（"),a("code",[t._v("\\u2029")]),t._v("）以外的所有字符。注意，对于码点大于"),a("code",[t._v("0xFFFF")]),t._v("的 Unicode 字符，点字符不能正确匹配，会认为这是两个字符。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/c.t/")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("c.t")]),t._v("匹配"),a("code",[t._v("c")]),t._v("和"),a("code",[t._v("t")]),t._v("之间包含任意一个字符的情况，只要这三个字符在同一行，比如"),a("code",[t._v("cat")]),t._v("、"),a("code",[t._v("c2t")]),t._v("、"),a("code",[t._v("c-t")]),t._v("等等，但是不匹配"),a("code",[t._v("coot")]),t._v("。")]),a("p",[a("strong",[t._v("（2）位置字符")])]),a("p",[t._v("位置字符用来提示字符所处的位置，主要有两个字符。")]),a("ul",[a("li",[a("code",[t._v("^")]),t._v(" 表示字符串的开始位置")]),a("li",[a("code",[t._v("$")]),t._v(" 表示字符串的结束位置")])]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// test必须出现在开始位置")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test123'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// test必须出现在结束位置")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'new test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 从开始位置到结束位置只有test")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[a("strong",[t._v("（3）选择符（"),a("code",[t._v("|")]),t._v("）")])]),a("p",[t._v("竖线符号（"),a("code",[t._v("|")]),t._v("）在正则表达式中表示“或关系”（OR），即"),a("code",[t._v("cat|dog")]),t._v("表示匹配"),a("code",[t._v("cat")]),t._v("或"),a("code",[t._v("dog")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/11|22/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'911'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，正则表达式指定必须匹配"),a("code",[t._v("11")]),t._v("或"),a("code",[t._v("22")]),t._v("。")]),a("p",[t._v("多个选择符可以联合使用。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 匹配fred、barney、betty之中的一个")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/fred|barney|betty/")]),t._v("\n")])]),a("p",[t._v("选择符会包括它前后的多个字符，比如"),a("code",[t._v("/ab|cd/")]),t._v("指的是匹配"),a("code",[t._v("ab")]),t._v("或者"),a("code",[t._v("cd")]),t._v("，而不是指匹配"),a("code",[t._v("b")]),t._v("或者"),a("code",[t._v("c")]),t._v("。如果想修改这个行为，可以使用圆括号。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/a( |\\t)b/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a\\tb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码指的是，"),a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v("之间有一个空格或者一个制表符。")]),a("p",[t._v("其他的元字符还包括"),a("code",[t._v("\\\\")]),t._v("、"),a("code",[t._v("\\*")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("?")]),t._v("、"),a("code",[t._v("()")]),t._v("、"),a("code",[t._v("[]")]),t._v("、"),a("code",[t._v("{}")]),t._v("等，将在下文解释。")]),a("h3",{attrs:{id:"转义符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义符","aria-hidden":"true"}},[t._v("#")]),t._v(" 转义符")]),a("p",[t._v("正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配"),a("code",[t._v("+")]),t._v("，就要写成"),a("code",[t._v("\\+")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/1+1/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身。第二个正则表达式使用反斜杠对加号转义，就能匹配成功。")]),a("p",[t._v("正则表达式中，需要反斜杠转义的，一共有12个字符："),a("code",[t._v("^")]),t._v("、"),a("code",[t._v(".")]),t._v("、"),a("code",[t._v("[")]),t._v("、"),a("code",[t._v("$")]),t._v("、"),a("code",[t._v("(")]),t._v("、"),a("code",[t._v(")")]),t._v("、"),a("code",[t._v("|")]),t._v("、"),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("?")]),t._v("、"),a("code",[t._v("{")]),t._v("和"),a("code",[t._v("\\\\")]),t._v("。需要特别注意的是，如果使用"),a("code",[t._v("RegExp")]),t._v("方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1\\+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1\\\\+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("RegExp")]),t._v("作为构造函数，参数是一个字符串。但是，在字符串内部，反斜杠也是转义字符，所以它会先被反斜杠转义一次，然后再被正则表达式转义一次，因此需要两个反斜杠转义。")]),a("h3",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 特殊字符")]),a("p",[t._v("正则表达式对一些不能打印的特殊字符，提供了表达方法。")]),a("ul",[a("li",[a("code",[t._v("\\cX")]),t._v(" 表示"),a("code",[t._v("Ctrl-[X]")]),t._v("，其中的"),a("code",[t._v("X")]),t._v("是A-Z之中任一个英文字母，用来匹配控制字符。")]),a("li",[a("code",[t._v("[\\b]")]),t._v(" 匹配退格键(U+0008)，不要与"),a("code",[t._v("\\b")]),t._v("混淆。")]),a("li",[a("code",[t._v("\\n")]),t._v(" 匹配换行键。")]),a("li",[a("code",[t._v("\\r")]),t._v(" 匹配回车键。")]),a("li",[a("code",[t._v("\\t")]),t._v(" 匹配制表符 tab（U+0009）。")]),a("li",[a("code",[t._v("\\v")]),t._v(" 匹配垂直制表符（U+000B）。")]),a("li",[a("code",[t._v("\\f")]),t._v(" 匹配换页符（U+000C）。")]),a("li",[a("code",[t._v("\\0")]),t._v(" 匹配"),a("code",[t._v("null")]),t._v("字符（U+0000）。")]),a("li",[a("code",[t._v("\\xhh")]),t._v(" 匹配一个以两位十六进制数（"),a("code",[t._v("\\x00")]),t._v("-"),a("code",[t._v("\\xFF")]),t._v("）表示的字符。")]),a("li",[a("code",[t._v("\\uhhhh")]),t._v(" 匹配一个以四位十六进制数（"),a("code",[t._v("\\u0000")]),t._v("-"),a("code",[t._v("\\uFFFF")]),t._v("）表示的 Unicode 字符。")])]),a("h3",{attrs:{id:"字符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符类","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符类")]),a("p",[t._v("字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如"),a("code",[t._v("[xyz]")]),t._v(" 表示"),a("code",[t._v("x")]),t._v("、"),a("code",[t._v("y")]),t._v("、"),a("code",[t._v("z")]),t._v("之中任选一个匹配。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/[abc]/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'apple'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，字符串"),a("code",[t._v("hello world")]),t._v("不包含"),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v("、"),a("code",[t._v("c")]),t._v("这三个字母中的任一个，所以返回"),a("code",[t._v("false")]),t._v("；字符串"),a("code",[t._v("apple")]),t._v("包含字母"),a("code",[t._v("a")]),t._v("，所以返回"),a("code",[t._v("true")]),t._v("。")]),a("p",[t._v("有两个字符在字符类中有特殊含义。")]),a("p",[a("strong",[t._v("（1）脱字符（^）")])]),a("p",[t._v("如果方括号内的第一个字符是"),a("code",[t._v("[^]")]),t._v("，则表示除了字符类之中的字符，其他字符都可以匹配。比如，"),a("code",[t._v("[^xyz]")]),t._v("表示除了"),a("code",[t._v("x")]),t._v("、"),a("code",[t._v("y")]),t._v("、"),a("code",[t._v("z")]),t._v("之外都可以匹配。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/[^abc]/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'bbc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("上面代码中，字符串"),a("code",[t._v("hello world")]),t._v("不包含字母"),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v("、"),a("code",[t._v("c")]),t._v("中的任一个，所以返回"),a("code",[t._v("true")]),t._v("；字符串"),a("code",[t._v("bbc")]),t._v("不包含"),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v("、"),a("code",[t._v("c")]),t._v("以外的字母，所以返回"),a("code",[t._v("false")]),t._v("。")]),a("p",[t._v("如果方括号内没有其他字符，即只有"),a("code",[t._v("[^]")]),t._v("，就表示匹配一切字符，其中包括换行符。相比之下，点号作为元字符（"),a("code",[t._v(".")]),t._v("）是不包括换行符的。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Please yes\\nmake my day!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/yes.*day/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/yes[^]*day/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// [ 'yes\\nmake my day']")]),t._v("\n")])]),a("p",[t._v("上面代码中，字符串"),a("code",[t._v("s")]),t._v("含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败；第二个正则表达式"),a("code",[t._v("[^]")]),t._v("包含一切字符，所以匹配成功。")]),a("blockquote",[a("p",[t._v("注意，脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。")])]),a("p",[a("strong",[t._v("（2）连字符（-）")])]),a("p",[t._v("某些情况下，对于连续序列的字符，连字符（"),a("code",[t._v("-")]),t._v("）用来提供简写形式，表示字符的连续范围。比如，"),a("code",[t._v("[abc]")]),t._v("可以写成"),a("code",[t._v("[a-c]")]),t._v("，"),a("code",[t._v("[0123456789]")]),t._v("可以写成"),a("code",[t._v("[0-9]")]),t._v("，同理"),a("code",[t._v("[A-Z]")]),t._v("表示26个大写字母。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/a-z/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符"),a("code",[t._v("b")]),t._v("。只有当连字号用在方括号之中，才表示连续的字符序列。")]),a("p",[t._v("以下都是合法的字符类简写形式。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9.")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("fA"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token constant"}},[t._v("F")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("zA"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token constant"}},[t._v("Z0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("31")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),a("p",[t._v("上面代码中最后一个字符类"),a("code",[t._v("[1-31]")]),t._v("，不代表"),a("code",[t._v("1")]),t._v("到"),a("code",[t._v("31")]),t._v("，只代表"),a("code",[t._v("1")]),t._v("到"),a("code",[t._v("3")]),t._v("。")]),a("p",[t._v("连字符还可以用来指定 Unicode 字符的范围。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"\\u0130\\u0131\\u0132"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/[\\u0128-\\uFFFF]/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("\\u0128-\\uFFFF")]),t._v("表示匹配码点在"),a("code",[t._v("0128")]),t._v("到"),a("code",[t._v("FFFF")]),t._v("之间的所有字符。")]),a("p",[t._v("另外，不要过分使用连字符，设定一个很大的范围，否则很可能选中意料之外的字符。最典型的例子就是"),a("code",[t._v("[A-z]")]),t._v("，表面上它是选中从大写的"),a("code",[t._v("A")]),t._v("到小写的"),a("code",[t._v("z")]),t._v("之间52个字母，但是由于在 ASCII 编码之中，大写字母与小写字母之间还有其他字符，结果就会出现意料之外的结果。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/[A-z]/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\\\'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，由于反斜杠（'\\'）的ASCII码在大写字母与小写字母之间，结果会被选中。")]),a("h3",{attrs:{id:"预定义模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预定义模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 预定义模式")]),a("p",[t._v("预定义模式指的是某些常见模式的简写方式。")]),a("ul",[a("li",[a("code",[t._v("\\d")]),t._v(" 匹配0-9之间的任一数字，相当于"),a("code",[t._v("[0-9]")]),t._v("。")]),a("li",[a("code",[t._v("\\D")]),t._v(" 匹配所有0-9以外的字符，相当于"),a("code",[t._v("[^0-9]")]),t._v("。")]),a("li",[a("code",[t._v("\\w")]),t._v(" 匹配任意的字母、数字和下划线，相当于"),a("code",[t._v("[A-Za-z0-9_]")]),t._v("。")]),a("li",[a("code",[t._v("\\W")]),t._v(" 除所有字母、数字和下划线以外的字符，相当于"),a("code",[t._v("[^A-Za-z0-9_]")]),t._v("。")]),a("li",[a("code",[t._v("\\s")]),t._v(" 匹配空格（包括换行符、制表符、空格符等），相等于"),a("code",[t._v("[ \\t\\r\\n\\v\\f]")]),t._v("。")]),a("li",[a("code",[t._v("\\S")]),t._v(" 匹配非空格的字符，相当于"),a("code",[t._v("[^ \\t\\r\\n\\v\\f]")]),t._v("。")]),a("li",[a("code",[t._v("\\b")]),t._v(" 匹配词的边界。")]),a("li",[a("code",[t._v("\\B")]),t._v(" 匹配非词边界，即在词的内部。")])]),a("p",[t._v("下面是一些例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\b 的例子")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello-world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'helloworld'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\B 的例子")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\Bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello-world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\Bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'helloworld'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("\\s")]),t._v("表示空格，所以匹配结果会包括空格。"),a("code",[t._v("\\b")]),t._v("表示词的边界，所以"),a("code",[t._v("world")]),t._v("的词首必须独立（词尾是否独立未指定），才会匹配。同理，"),a("code",[t._v("\\B")]),t._v("表示非词的边界，只有"),a("code",[t._v("world")]),t._v("的词首不独立，才会匹配。")]),a("p",[t._v("通常，正则表达式遇到换行符（"),a("code",[t._v("\\n")]),t._v("）就会停止匹配。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"<b>Hello</b>\\n<i>world!</i>"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token regex"}},[t._v("/.*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "<b>Hello</b>"')]),t._v("\n")])]),a("p",[t._v("上面代码中，字符串"),a("code",[t._v("html")]),t._v("包含一个换行符，结果点字符（"),a("code",[t._v(".")]),t._v("）不匹配换行符，导致匹配结果可能不符合原意。这时使用"),a("code",[t._v("\\s")]),t._v("字符类，就能包括换行符。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"<b>Hello</b>\\n<i>world!</i>"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token regex"}},[t._v("/[\\S\\s]*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "<b>Hello</b>\\n<i>world!</i>"')]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("[\\S\\s]")]),t._v("指代一切字符。")]),a("h3",{attrs:{id:"重复类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复类","aria-hidden":"true"}},[t._v("#")]),t._v(" 重复类")]),a("p",[t._v("模式的精确匹配次数，使用大括号（"),a("code",[t._v("{}")]),t._v("）表示。"),a("code",[t._v("{n}")]),t._v("表示恰好重复"),a("code",[t._v("n")]),t._v("次，"),a("code",[t._v("{n,}")]),t._v("表示至少重复"),a("code",[t._v("n")]),t._v("次，"),a("code",[t._v("{n,m}")]),t._v("表示重复不少于"),a("code",[t._v("n")]),t._v("次，不多于"),a("code",[t._v("m")]),t._v("次。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/lo{2}k/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'look'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("lo"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("k"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'looook'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，第一个模式指定"),a("code",[t._v("o")]),t._v("连续出现2次，第二个模式指定"),a("code",[t._v("o")]),t._v("连续出现2次到5次之间。")]),a("h3",{attrs:{id:"量词符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词符","aria-hidden":"true"}},[t._v("#")]),t._v(" 量词符")]),a("p",[t._v("量词符用来设定某个模式出现的次数。")]),a("ul",[a("li",[a("code",[t._v("?")]),t._v(" 问号表示某个模式出现0次或1次，等同于"),a("code",[t._v("{0, 1}")]),t._v("。")]),a("li",[a("code",[t._v("*")]),t._v(" 星号表示某个模式出现0次或多次，等同于"),a("code",[t._v("{0,}")]),t._v("。")]),a("li",[a("code",[t._v("+")]),t._v(" 加号表示某个模式出现1次或多次，等同于"),a("code",[t._v("{1,}")]),t._v("。")])]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// t 出现0次或1次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// t 出现1次或多次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// t 出现0次或多次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'tttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("h3",{attrs:{id:"贪婪模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪模式")]),a("p",[t._v("上一小节的三个量词符，默认情况下都是最大可能匹配，即匹配直到下一个字符不满足匹配规则为止。这被称为贪婪模式。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a+/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aaa"]')]),t._v("\n")])]),a("p",[t._v("上面代码中，模式是"),a("code",[t._v("/a+/")]),t._v("，表示匹配1个"),a("code",[t._v("a")]),t._v("或多个"),a("code",[t._v("a")]),t._v("，那么到底会匹配几个"),a("code",[t._v("a")]),t._v("呢？因为默认是贪婪模式，会一直匹配到字符"),a("code",[t._v("a")]),t._v("不出现为止，所以匹配结果是3个"),a("code",[t._v("a")]),t._v("。")]),a("p",[t._v("如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a+?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a"]')]),t._v("\n")])]),a("p",[t._v("上面代码中，模式结尾添加了一个问号"),a("code",[t._v("/a+?/")]),t._v("，这时就改为非贪婪模式，一旦条件满足，就不再往下匹配。")]),a("p",[t._v("除了非贪婪模式的加号，还有非贪婪模式的星号（"),a("code",[t._v("*")]),t._v("）。")]),a("ul",[a("li",[a("code",[t._v("*?")]),t._v("：表示某个模式出现0次或多次，匹配时采用非贪婪模式。")]),a("li",[a("code",[t._v("+?")]),t._v("：表示某个模式出现1次或多次，匹配时采用非贪婪模式。")])]),a("h3",{attrs:{id:"修饰符-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 修饰符")]),a("p",[t._v("修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。")]),a("p",[t._v("修饰符可以单个使用，也可以多个一起使用。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 单个修饰符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/test/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 多个修饰符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/test/ig")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[a("strong",[t._v("（1）g 修饰符")])]),a("p",[t._v("默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。"),a("code",[t._v("g")]),t._v("修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/b/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码中，正则模式不含"),a("code",[t._v("g")]),t._v("修饰符，每次都是从字符串头部开始匹配。所以，连续做了三次匹配，都返回"),a("code",[t._v("true")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/b/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("上面代码中，正则模式含有"),a("code",[t._v("g")]),t._v("修饰符，每次都是从上一次匹配成功处，开始向后匹配。因为字符串"),a("code",[t._v("abba")]),t._v("只有两个"),a("code",[t._v("b")]),t._v("，所以前两次匹配结果为"),a("code",[t._v("true")]),t._v("，第三次匹配结果为"),a("code",[t._v("false")]),t._v("。")]),a("p",[a("strong",[t._v("（2）i 修饰符")])]),a("p",[t._v("默认情况下，正则对象区分字母的大小写，加上"),a("code",[t._v("i")]),t._v("修饰符以后表示忽略大小写（ignorecase）。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/abc/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ABC'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("abc"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ABC'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面代码表示，加了"),a("code",[t._v("i")]),t._v("修饰符以后，不考虑大小写，所以模式"),a("code",[t._v("abc")]),t._v("匹配字符串"),a("code",[t._v("ABC")]),t._v("。")]),a("p",[a("strong",[t._v("（3）m 修饰符")])]),a("p",[a("code",[t._v("m")]),t._v("修饰符表示多行模式（multiline），会修改"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("的行为。默认情况下（即不加"),a("code",[t._v("m")]),t._v("修饰符时），"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("匹配字符串的开始处和结尾处，加上"),a("code",[t._v("m")]),t._v("修饰符以后，"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("还会匹配行首和行尾，即"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("会识别换行符（"),a("code",[t._v("\\n")]),t._v("）。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/world$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world\\n'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("world$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world\\n'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("上面的代码中，字符串结尾处有一个换行符。如果不加"),a("code",[t._v("m")]),t._v("修饰符，匹配不成功，因为字符串的结尾不是"),a("code",[t._v("world")]),t._v("；加上以后，"),a("code",[t._v("$")]),t._v("可以匹配行尾。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token regex"}},[t._v("/^b/m")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a\\nb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);