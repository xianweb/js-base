(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{72:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 运算符")]),a("p",[s._v("运算符是处理数据的基本方法，用来从现有的值得到新的值。"),a("code",[s._v("JavaScript")]),s._v(" 提供了多种运算符，本章逐一介绍这些运算符。")]),a("h2",{attrs:{id:"加法运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加法运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 加法运算符")]),a("p",[s._v("加法运算符（+）是最常见的运算符，用来求两个数值的和。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n\n")])]),a("p",[s._v("如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "1a"')]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "falsea"')]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("'3'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "345"')]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'5'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "75"')]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'bc'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "abc"')]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "1a"')]),s._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "falsea"')]),s._v("\n")])]),a("h2",{attrs:{id:"算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 算术运算符")]),a("p",[s._v("包括加法运算符在内，JavaScript 共提供10个算术运算符，用来完成基本的算术运算。")]),a("ul",[a("li",[a("strong",[s._v("加法运算符")]),s._v("：x + y")]),a("li",[a("strong",[s._v("减法运算符")]),s._v("： x - y")]),a("li",[a("strong",[s._v("乘法运算符")]),s._v("： x * y")]),a("li",[a("strong",[s._v("除法运算符")]),s._v("：x / y")]),a("li",[a("strong",[s._v("指数运算符")]),s._v("：x ** y")]),a("li",[a("strong",[s._v("余数运算符")]),s._v("：x % y")]),a("li",[a("strong",[s._v("自增运算符")]),s._v("：++x 或者 x++")]),a("li",[a("strong",[s._v("自减运算符")]),s._v("：--x 或者 x--")]),a("li",[a("strong",[s._v("数值运算符")]),s._v("： +x")]),a("li",[a("strong",[s._v("负数值运算符")]),s._v("：-x")])]),a("p",[s._v("减法、乘法、除法运算法比较单纯，就是执行相应的数学运算。下面介绍其他几个算术运算符。")]),a("h2",{attrs:{id:"余数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#余数运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 余数运算符")]),a("p",[s._v("余数运算符（%）返回前一个运算子被后一个运算子除，所得的余数。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n")])]),a("h2",{attrs:{id:"自增和自减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增和自减运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 自增和自减运算符")]),a("p",[s._v("自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。")]),a("h3",{attrs:{id:"x-和-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x-和-x","aria-hidden":"true"}},[s._v("#")]),s._v(" ++x 和 --x")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token operator"}},[s._v("++")]),s._v("a"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//2")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token operator"}},[s._v("--")]),s._v("b"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//0")]),s._v("\n")])]),a("h3",{attrs:{id:"x-和-x-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x-和-x-2","aria-hidden":"true"}},[s._v("#")]),s._v(" x++ 和 x--")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{attrs:{class:"token operator"}},[s._v("++")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{attrs:{class:"token operator"}},[s._v("++")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n")])]),a("h3",{attrs:{id:"x-和-x-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x-和-x-3","aria-hidden":"true"}},[s._v("#")]),s._v(" x++ 和 ++x")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token operator"}},[s._v("++")]),s._v("a"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//2")]),s._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{attrs:{class:"token operator"}},[s._v("++")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n")])]),a("h2",{attrs:{id:"数值运算符，负数值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值运算符，负数值运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 数值运算符，负数值运算符")]),a("p",[s._v("数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[s._v("+")]),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("+")]),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("+")]),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\n")])]),a("p",[s._v("负数值运算符（-），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("-")]),s._v("x "),a("span",{attrs:{class:"token comment"}},[s._v("// -1")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("-")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token operator"}},[s._v("-")]),s._v("x"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),a("h2",{attrs:{id:"指数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指数运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 指数运算符")]),a("p",[s._v("指数运算符（**）完成指数运算，前一个运算子是底数，后一个运算子是指数。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("**")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 16")]),s._v("\n")])]),a("h2",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 赋值运算符")]),a("p",[s._v("赋值运算符用于给变量赋值，最常见的赋值运算符，当然就是等号（=）。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 将 1 赋值给变量 x")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 将变量 y 的值赋值给变量 x")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),a("p",[s._v("赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x + y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("+=")]),s._v(" y\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x - y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("-=")]),s._v(" y\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x * y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("*=")]),s._v(" y\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x / y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("/=")]),s._v(" y\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x % y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("%=")]),s._v(" y\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 x = x ** y")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v("**=")]),s._v(" y\n")])]),a("h2",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 比较运算符")]),a("p",[s._v("比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),a("p",[s._v("JavaScript 一共提供了8个比较运算符。")]),a("ul",[a("li",[a("code",[s._v("<")]),s._v(" 小于运算符")]),a("li",[a("code",[s._v(">")]),s._v(" 大于运算符")]),a("li",[a("code",[s._v("<=")]),s._v(" 小于或等于运算符")]),a("li",[a("code",[s._v(">=")]),s._v(" 大于或等于运算符")]),a("li",[a("code",[s._v("==")]),s._v(" 相等运算符")]),a("li",[a("code",[s._v("===")]),s._v(" 严格相等运算符")]),a("li",[a("code",[s._v("!=")]),s._v(" 不相等运算符")]),a("li",[a("code",[s._v("!==")]),s._v(" 严格不相等运算符")])]),a("h2",{attrs:{id:"字符串的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的比较","aria-hidden":"true"}},[s._v("#")]),s._v(" 字符串的比较")]),a("p",[s._v("字符串按照字典顺序进行比较。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'cat'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'dog'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'cat'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'catalog'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("p",[s._v("JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'cat'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'Cat'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true'")]),s._v("\n")])]),a("p",[s._v("上面代码中，小写的c的 Unicode 码点（99）大于大写的C的 Unicode 码点（67），所以返回true。")]),a("p",[s._v("由于所有字符都有 Unicode 码点，因此汉字也可以比较。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'大'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'小'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("p",[s._v("上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回false。")]),a("h2",{attrs:{id:"非字符串的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非字符串的比较","aria-hidden":"true"}},[s._v("#")]),s._v(" 非字符串的比较")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'4'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 5 > Number('4')")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 即 5 > 4")]),s._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 Number(true) > Number(false)")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 即 1 > 0")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 2 > Number(true)")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 即 2 > 1")]),s._v("\n")])]),a("p",[s._v("这里有一个特殊情况，即任何值（包括NaN本身）与NaN比较，返回的都是false。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("h2",{attrs:{id:"严格相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格相等运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 严格相等运算符")]),a("p",[s._v("JavaScript 提供两种相等运算符：==和===。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"1"')]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"true"')]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("p",[s._v("两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("p",[s._v("上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是false。")]),a("p",[s._v("如果两个变量引用同一个对象，则它们相等。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" v1 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" v2 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" v1"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nv1 "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" v2 "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),a("h2",{attrs:{id:"相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 相等运算符")]),a("h3",{attrs:{id:"（1）原始类型的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）原始类型的值","aria-hidden":"true"}},[s._v("#")]),s._v(" （1）原始类型的值")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 1 === Number(true)")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 0 === Number(false)")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 2 === Number(true)")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 2 === Number(false)")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("'true'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 Number('true') === Number(true)")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 NaN === 1")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 Number('') === 0")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 0 === 0")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("  "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 Number('') === Number(false)")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 0 === 0")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("  "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 Number('1') === Number(true)")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于 1 === 1")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("'\\n  123  \\t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 因为字符串转为数字时，省略前置和后置的空格")]),s._v("\n")])]),a("h3",{attrs:{id:"（2）undefined-和-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）undefined-和-null","aria-hidden":"true"}},[s._v("#")]),s._v(" （2）undefined 和 null")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" undefined "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" undefined "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\nundefined "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),a("h3",{attrs:{id:"（3）相等运算符的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（3）相等运算符的缺点","aria-hidden":"true"}},[s._v("#")]),s._v(" （3）相等运算符的缺点")]),a("p",[s._v("相等运算符隐藏的类型转换，会带来一些违反直觉的结果。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v("             "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'0'")]),s._v("            "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\n"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("           "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("          "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'false'")]),s._v("    "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'0'")]),s._v("        "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" undefined  "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v("       "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" undefined   "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\n"),a("span",{attrs:{class:"token string"}},[s._v("' \\t\\r\\n '")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),a("p",[s._v("上面这些表达式都很容易出错，因此不要使用相等运算符（==），最好只使用严格相等运算符（===）。")])]),a("h3",{attrs:{id:"（4）不相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（4）不相等运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" （4）不相等运算符")]),a("p",[s._v("相等运算符有一个对应的“不相等运算符”（!=），两者的运算结果正好相反。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("h2",{attrs:{id:"布尔运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 布尔运算符")]),a("p",[s._v("布尔运算符用于将表达式转为布尔值，一共包含四个运算符。")]),a("ul",[a("li",[s._v("取反运算符："),a("code",[s._v("!")])]),a("li",[s._v("且运算符："),a("code",[s._v("&&")])]),a("li",[s._v("或运算符："),a("code",[s._v("||")]),s._v("\n= 三元运算符："),a("code",[s._v("?:")])])]),a("h2",{attrs:{id:"取反运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取反运算符（-）","aria-hidden":"true"}},[s._v("#")]),s._v(" 取反运算符（!）")]),a("p",[s._v("取反运算符是一个感叹号，用于将布尔值变为相反值，即true变成false，false变成true。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),a("p",[s._v("对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为true，其他值都为false。")]),a("ul",[a("li",[a("code",[s._v("undefined")])]),a("li",[a("code",[s._v("null")])]),a("li",[a("code",[s._v("false")])]),a("li",[a("code",[s._v("0")])]),a("li",[a("code",[s._v("NaN")])]),a("li",[s._v("空字符串（"),a("code",[s._v("''")]),s._v("）")])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[s._v("!")]),s._v("undefined "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token number"}},[s._v("54")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token string"}},[s._v("'hello'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),a("p",[s._v("如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与Boolean函数的作用相同。这是一种常用的类型转换的写法。")])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[s._v("!")]),a("span",{attrs:{class:"token operator"}},[s._v("!")]),s._v("x\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("Boolean")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),a("h2",{attrs:{id:"且运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#且运算符（-）","aria-hidden":"true"}},[s._v("#")]),s._v(" 且运算符（&&）")]),a("p",[s._v("且运算符（&&）往往用于多个表达式的求值。")]),a("p",[s._v("它的运算规则是：")]),a("ul",[a("li",[a("p",[s._v("如果第一个运算子的布尔值为"),a("code",[s._v("true")]),s._v("，则返回第二个运算子的值（注意是值，不是布尔值）；")])]),a("li",[a("p",[s._v("如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值。")])])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// ""')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'f'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "f"')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("2")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'f'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// ""')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// ""')]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nx "),a("span",{attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),a("p",[s._v("这种跳过第二个运算子的机制，被称为“"),a("strong",[s._v("短路")]),s._v("”。有些程序员喜欢用它取代if结构，比如下面是一段if结构的代码，就可以用且运算符改写。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{attrs:{class:"token function"}},[s._v("doSomething")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n\ni "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("doSomething")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),a("p",[s._v("上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。")]),a("p",[s._v("且运算符可以多个连用，这时返回第一个布尔值为false的表达式的值。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'foo'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'foo'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// ''")]),s._v("\n")])]),a("h2",{attrs:{id:"或运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#或运算符（-）","aria-hidden":"true"}},[s._v("#")]),s._v(" 或运算符（||）")]),a("p",[s._v("或运算符（||）也用于多个表达式的求值。")]),a("p",[s._v("它的运算规则是：")]),a("ul",[a("li",[a("p",[s._v("如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；")])]),a("li",[a("p",[s._v("如果第一个运算子的布尔值为false，则返回第二个运算子的值。")])])]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "t"')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'f'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "t"')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'f'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "f"')]),s._v("\n"),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// ""')]),s._v("\n")])]),a("p",[s._v("短路规则对这个运算符也适用。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("2")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nx "),a("span",{attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),a("p",[s._v("上面代码中，且运算符的第一个运算子为true，所以直接返回true，不再运行第二个运算子。")]),a("p",[s._v("或运算符可以多个连用，这时返回第一个布尔值为true的表达式的值。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'foo'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n")])]),a("p",[s._v("或运算符常用于为一个变量设置默认值。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("saveText")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  text "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" text "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 或者写成")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("saveText")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token keyword"}},[s._v("this")]),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("text "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("''")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),a("h2",{attrs:{id:"三元条件运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三元条件运算符（-）","aria-hidden":"true"}},[s._v("#")]),s._v(" 三元条件运算符（?:）")]),a("p",[s._v("三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'t'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'hello'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'world'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "hello"')]),s._v("\n"),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'hello'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'world'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "world"')]),s._v("\n")])]),a("p",[s._v("通常来说，三元条件表达式与if...else语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，"),a("strong",[s._v("if...else是语句")]),s._v("，"),a("strong",[s._v("没有返回值")]),s._v("；"),a("strong",[s._v("三元条件表达式是表达式，具有返回值")]),s._v("。所以，在需要返回值的场合，"),a("strong",[s._v("只能")]),s._v("使用三元条件表达式，而不能使用"),a("code",[s._v("if..else")]),s._v("。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("log")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'T'")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'F'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),a("h2",{attrs:{id:"其他运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 其他运算符")]),a("h3",{attrs:{id:"void-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void-运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" void 运算符")]),a("p",[s._v("void运算符的作用是执行一个表达式，然后不返回任何值，或者说返回undefined。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("void")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])]),a("p",[s._v("上面是void运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为void运算符的优先性很高，如果不使用括号，容易造成错误的结果。")]),a("h3",{attrs:{id:"逗号运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符","aria-hidden":"true"}},[s._v("#")]),s._v(" 逗号运算符")]),a("p",[s._v("逗号运算符用于对两个表达式求值，并返回后一个表达式的值。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[s._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'b'")]),s._v(" "),a("span",{attrs:{class:"token comment"}},[s._v('// "b"')]),s._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" y "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{attrs:{class:"token operator"}},[s._v("++")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("10")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nx "),a("span",{attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\ny "),a("span",{attrs:{class:"token comment"}},[s._v("// 10")]),s._v("\n")])]),a("p",[s._v("上面代码中，逗号运算符返回后一个表达式的值。")])])}],!1,null,null,null);t.default=e.exports}}]);